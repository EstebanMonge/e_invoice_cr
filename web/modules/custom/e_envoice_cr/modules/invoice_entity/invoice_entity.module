<?php

use Drupal\e_invoice_cr\Authentication;
use Drupal\e_invoice_cr\XMLGenerator;
use Drupal\e_invoice_cr\Signature;

/**
 * Implements Hook_form_alter()
 */
function invoice_entity_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id === 'invoice_entity_add_form' || $form_id === 'invoice_entity_edit_form') {
    //get default currency
    $settings = \Drupal::config('e_invoice_cr.settings');
    $currency = '';
    if (isset($settings) && !is_null($settings)) {
      $currency = $settings->get('currency') === 'crc' ? '₡' : '$';

    } else {
      invoice_entity_config_error();
    }

    $form['field_clave_numerica']['#disabled'] = 'disabled';
    $form['field_consecutivo']['#disabled'] = 'disabled';
    $form['field_total_ventaneta']['#disabled'] = 'disabled';
    if ($form_id === 'invoice_entity_add_form') {
      // generate the invoice keys
      $form['field_clave_numerica']['widget'][0]['value']['#default_value'] = invoice_entity_generate_key();
      $form['field_consecutivo']['widget'][0]['value']['#default_value'] = invoice_entity_generate_consecutive();
      // add the custom form action
      $form['actions']['submit']['#submit'][] = 'invoice_entity_custom_submit';
    }
    $total_ventaneta = $form['field_total_ventaneta']['widget'][0]['value']['#title'];
    $form['field_total_ventaneta']['widget'][0]['value']['#title'] = $total_ventaneta . ' ' . $currency;
    $form['field_total_impuesto']['#disabled'] = 'disabled';
    $total_impuesto = $form['field_total_impuesto']['widget'][0]['value']['#title'];
    $form['field_total_impuesto']['widget'][0]['value']['#title'] = $total_impuesto . ' ' . $currency;
    $form['field_totalcomprobante']['#disabled'] = 'disabled';
    $totalcomprobante = $form['field_totalcomprobante']['widget'][0]['value']['#title'];
    $form['field_totalcomprobante']['widget'][0]['value']['#title'] = $totalcomprobante . ' ' . $currency;
    for ($i = 0; $i >= 0; $i++) {
      if (array_key_exists($i, $form['field_filas']['widget'])) {
        // rows
        $price = $form['field_filas']['widget'][$i]['subform']['field_preciounitario']['widget'][0]['value']['#title'];
        $form['field_filas']['widget'][$i]['subform']['field_preciounitario']['widget'][0]['value']['#title'] = $price . ' ' . $currency;
        $form['field_total_impuesto']['#disabled'] = 'disabled';
        $form['field_filas']['widget'][$i]['subform']['field_monto_total_linea']['#disabled'] = 'disabled';
        $form['field_filas']['widget'][$i]['subform']['field_codigo']['#disabled'] = 'disabled';
        $form['field_filas']['widget'][$i]['subform']['field_codigo']['widget'][0]['value']['#default_value'] = invoice_entity_generate_row_key();
        $form['field_filas']['widget'][$i]['subform']['field_montototal']['#disabled'] = 'disabled';
        $form['field_filas']['widget'][$i]['subform']['field_subtotal']['#disabled'] = 'disabled';
        $form['field_filas']['widget'][$i]['subform']['field_impuesto']['#disabled'] = 'disabled';
      } else {
        break;
      }
    }
    // the library
    $form['#attached']['library'][] = 'invoice_entity/invoice-rows';
    $form['#attached']['library'][] = 'invoice_entity/invoice-rows-js';
  }
}

/**
 * Custom submit action
 */
function invoice_entity_custom_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  ////////////////// Authentication ////////////////////

  try {
    // get authentication token for the API
    $authentication = new Authentication();
    $token = $authentication->getLoginToken();
  } catch (Exception $e) {
    $message = 'Error obteniendo el token de autenticación, la factura no se podrá enviar.';
    drupal_set_message(t($message), 'error');
  }

  if (!$token) {
    $message = 'Error obteniendo el token de autenticación, la factura no se podrá enviar.';
    drupal_set_message(t($message), 'error');
  } else {
    ////////////////// Get all xml data ////////////////////

    // get the invoice data
    $key = $form_state->getValue('field_clave_numerica')[0]['value'];
    $consecutive = $form_state->getValue('field_consecutivo')[0]['value'];
    $condition = $form_state->getValue('field_condicion_venta')[0]['value'];
    $client_id = $form_state->getValue('field_cliente')[0]['target_id'];
    $client = \Drupal::entityTypeManager()->getStorage('customer_entity')->load($client_id);
    $date_object = $form_state->getValue('field_fecha_emision')[0]['value'];
    $date = $date_object->format('Y-m-d\TH:i:s-z');
    $rows = $form_state->getValue('field_filas');
    $pay_type = $form_state->getValue('field_medio_de_pago')[0]['value'];
    $p_credit = $form_state->getValue('field_plazo_credito')[0]['value'];
    $t_tax = $form_state->getValue('field_total_impuesto')[0]['value'];
    $t_sale = $form_state->getValue('field_total_ventaneta')[0]['value'];
    $t_invoice = $form_state->getValue('field_totalcomprobante')[0]['value'];
    // group the general information
    $general = [
      'key' => $key,
      'consecutive' => $consecutive,
      'condition' => $condition,
      'date' => $date,
      'pay_type' => $pay_type,
      'p_credit' => $p_credit,
      't_tax' => $t_tax,
      't_sale' => $t_sale,
      't_invoice' => $t_invoice,
    ];
    // the emitter data (currently not supporting fax fields)
    $settings = \Drupal::config('e_invoice_cr.settings');
    $emitter = [
      'name' => $settings->get('name'),
      'id' => [
          'type' => $settings->get('id_type'),
          'number' => $settings->get('id'),
        ],
      'commercialName' => $settings->get('commercial_name'),
      'address' => [
        'data1' => substr($settings->get('postal_code'), 0, 1),
        'data2' => substr($settings->get('postal_code'), 1, 2),
        'data3' => substr($settings->get('postal_code'), 3, 5),
        'data4' => '01',// this value is not support (*)
        'data5' => $settings->get('address'),
      ],
      'phone' => [
          'code' => substr($settings->get('phone'), 0, 3),
          'number' => substr($settings->get('phone'), 3 ),
        ],
      'fax' => [
          'code' => '',
          'number' => '',
        ],
      'email' => $settings->get('email'),
    ];

    ////////////////// Create XML document ////////////////////

    // get base url
    global $base_url;
    //generate the XML file with the invoice data
    $xml_generator = new XMLGenerator();
    // get the xml doc built
    $xml = $xml_generator->generateInvoiceXML($general, $client, $emitter,$rows);
    $xml->saveXML();
    // create dir
    $path = "public://xml/";
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);
    $result = $xml->save('public://xml/document.xml', LIBXML_NOEMPTYTAG);

    ////////////////// Sign document ////////////////////

    $signature = new Signature();
    $response = $signature->signDocument();

    if (array_search("Error", $response) || array_search("error", $response)) {
      $message = 'Error firmando el documento xml, la factura no se podrá enviar.';
      drupal_set_message(t($message), 'error');
    }

  }


}

/**
 * Generate the row key
 */
function invoice_entity_generate_row_key() {
  // get last consecutive
  $result = rand(1,999999);
  $result = invoice_entity_set_size((string)$result, 6);

  return $result;
}

/**
 * Generate the consecutive key and saves it
 */
function invoice_entity_generate_consecutive() {
  // get last consecutive
  $consecutive_number = invoice_entity_get_variable('consecutive_number');
  if (!is_null($consecutive_number)) {
    $consecutive_number = (int)$consecutive_number + 1;
    // validate size
    $consecutive_number = invoice_entity_set_size((string)$consecutive_number, 20);
    // save the current values
    invoice_entity_set_variable('consecutive_number', $consecutive_number);
  } else {
    $consecutive_number = '00000000000000000001';
    invoice_entity_set_variable('consecutive_number', $consecutive_number);
  }
  return $consecutive_number;
}

/**
 * Generate the consecutive key and saves it
 */
function invoice_entity_generate_key() {
  // get last key index
  $invoice_number = invoice_entity_get_variable('invoice_number');
  $secure_code = invoice_entity_get_variable('secure_code');
  if (!is_null($invoice_number) || !is_null($secure_code)) {
    $invoice_number = (int)$invoice_number + 1;
    $secure_code = (int)$secure_code + 1;
    // validate size
    $invoice_number = invoice_entity_set_size((string)$invoice_number, 10);
    $secure_code = invoice_entity_set_size((string)$secure_code, 8);
    // save the current values
    invoice_entity_set_variable('invoice_number', $invoice_number);
    invoice_entity_set_variable('secure_code', $secure_code);
  } else {
    $invoice_number = '0000000001';
    invoice_entity_set_variable('invoice_number', $invoice_number);
    $secure_code = '0000000001';
    invoice_entity_set_variable('secure_code', $secure_code);
  }
  // get date information
  $day = date("d");
  $mouth = date("m");
  $year = date("y");
  // the id user
  $settings = \Drupal::config('e_invoice_cr.settings');
  $id_user = $settings->get('id');
  if (is_null($id_user)) {
    invoice_entity_config_error();
    return '0';
  } else {
    // join the key
    $key = '506' . $day . $mouth . $year . $id_user . '0010000101'. $invoice_number . '1' . $secure_code;
    return $key;
  }
}

/**
 * Error messages
 */
function invoice_entity_config_error() {
  $message = 'No se puede generar la clave de la factura por no se han ingresado los';
  $message += 'datos de configuración para el modulo, ingrese a /admin/structure/e_invoice_cr/settings';
  $message += 'para actualizar sus datos.';
  drupal_set_message(t($message), 'error');
}

/**
 * Gets variables
 */
function invoice_entity_get_variable($variable_name) {
  $config = \Drupal::config('invoice_entity.settings');
  $value = $config->get($variable_name);
  return $value;
}

/**
 * Sets variables
 */
function invoice_entity_set_variable($variable_name, $value) {
  $config = \Drupal::service('config.factory')->getEditable('invoice_entity.settings');
  $config->set($variable_name, $value)->save();
}

/**
 * Sets the correct string size
 */
function invoice_entity_set_size($variable, $size) {
  $current_size = strlen($variable);
  $size = $size - $current_size;
  for ($i = 0; $i < $size; $i++) {
    $variable = '0' . (string)$variable;
  }
  return $variable;
}


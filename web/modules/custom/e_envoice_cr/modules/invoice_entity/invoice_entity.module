<?php

/**
 * @file
 * Contains invoice_entity.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Error messages.
 */
function invoice_entity_config_error() {
  $message = t('The document key could not be generated because there are not configuration data yet, to set those go to /admin/e-invoice-cr/settings.');
  drupal_set_message($message, 'error');
}

/**
 * Implements hook_entity_operation().
 */
function invoice_entity_entity_operation(EntityInterface $entity) {
  $type = $entity->getEntityType();
  if ($type->id() === "invoice_entity") {
    $status = $entity->get('moderation_state')->value;
    if ($status === "draft") {
      $key = $entity->get('field_numeric_key')->value;
      $operations = [];
      $operations['validate'] = [
        'title' => t('Validate'),
        'url' => Url::fromRoute("invoice_entity.validate", ["key" => $key, "id" => $entity->id()]),
        'weight' => 0,
      ];
      return $operations;
    }
    if ($status === "published") {
      $operations = [];
      $operations['View'] = [
        'title' => t('View'),
        'url' => Url::fromRoute("entity.invoice_entity.canonical", ["invoice_entity" => $entity->id()]),
        'weight' => 0,
      ];
      return $operations;
    }
  }
}

/**
 * Implements hook_cron().
 */
function invoice_entity_cron() {
  // Update the invoices states.
  $query = \Drupal::entityQuery('invoice_entity');
  $nids = $query->execute();
  if (count($nids) > 0) {
    $entity_manager = \Drupal::entityManager();
    foreach ($nids as $index => $item) {
      $entity = $entity_manager->getStorage('invoice_entity')->load($item);
      if ($entity->get('moderation_state')->value === 'draft') {
        /** @var \Drupal\invoice_entity\InvoiceService $invoice_service */
        $invoice_service = \Drupal::service('invoice_entity.service');
        $invoice_service->validateInvoiceEntity($entity);
        // Show a notification massage.
        drupal_set_message(t("The invoices have been verified during the cron process."), 'status');
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function invoice_entity_preprocess_page(&$variables) {
  // Validate the route and the library.
  $variables['page']['#cache']['contexts'][] = 'route';
  $route = "entity.invoice_entity.canonical";
  if (\Drupal::routeMatch()->getRouteName() === $route) {
    $variables['#attached']['library'][] = 'invoice_entity/invoice';
  }
}

/**
 * Implements hook_field_display_alter().
 */
function invoice_entity_preprocess_field(&$variables, $hook) {
  if ($variables['entity_type'] === "invoice_entity" || $variables['entity_type'] === "paragraph") {
    $name = $variables['field_name'];
    $fields = [
      "field_total_ventaneta",
      "field_total_impuesto",
      "field_totalcomprobante",
      "field_total_discount",
      "field_preciounitario",
      "field_total_amount",
      "field_subtotal",
      "field_monto_total_linea"
    ];
    if (in_array($name, $fields)) {
      $settings = \Drupal::config('e_invoice_cr.settings');
      $currency = $settings->get("currency") === "crc" ? " â‚¡" : " $";
      $variables['label'] = $variables['label'] . $currency;
    }
  }
}

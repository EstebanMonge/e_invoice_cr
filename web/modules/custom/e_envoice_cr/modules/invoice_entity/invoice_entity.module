<?php

/**
 * @file
 * Contains invoice_entity.module.
 */

use Drupal\e_invoice_cr\XMLGenerator;
use Drupal\e_invoice_cr\Signature;
use Drupal\e_invoice_cr\Communication;
use Drupal\invoice_email\InvoiceEmailEvent;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\invoice_entity\Entity\InvoiceEntityInterface;

/**
 * Implements hook_form_alter().
 */
function invoice_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'invoice_entity_add_form' || $form_id === 'invoice_entity_edit_form') {
    /** @var \Drupal\invoice_entity\InvoiceService $invoice_service */
    $invoice_service = \Drupal::service('invoice_entity.service');

    // Get default currency.
    $settings = \Drupal::config('e_invoice_cr.settings');
    $currency = '';
    if (isset($settings) && !is_null($settings)) {
      if (!is_null($settings->get('currency'))) {
        $currency = $settings->get('currency') === 'crc' ? 'â‚¡' : '$';
      }
      else {
        invoice_entity_config_error();
        // Disable the submit button.
        $form['actions']['submit']['#disabled'] = TRUE;
      }
    }
    else {
      invoice_entity_config_error();
      // Disable the submit button.
      $form['actions']['submit']['#disabled'] = TRUE;
    }

    $form['field_clave_numerica']['#disabled'] = 'disabled';
    $form['field_consecutivo']['#disabled'] = 'disabled';
    $form['field_total_ventaneta']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    if ($form_id === 'invoice_entity_add_form') {
      // Generate the invoice keys.
      $type_of = $form_state->getUserInput()['type_of'];
      $key = $type_of ? $invoice_service->getUniqueInvoiceKey($type_of) : $invoice_service->getUniqueInvoiceKey();
      if ($key == NULL) {
        invoice_entity_config_error();
      } else {
        $invoice_service->updateValues();
      }

      $form['field_clave_numerica']['widget'][0]['value']['#default_value'] = $key;
      $form['field_consecutivo']['widget'][0]['value']['#default_value'] = invoice_entity_generate_consecutive($key);
      // Add the custom form action.
      array_unshift($form['actions']['submit']['#submit'], 'invoice_entity_custom_submit');
    }
    $form['field_total_discount']['widget'][0]['value']['#title'] .= ' ' . $currency;
    $form['field_total_discount']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $total_ventaneta = $form['field_total_ventaneta']['widget'][0]['value']['#title'];
    $form['field_total_ventaneta']['widget'][0]['value']['#title'] = $total_ventaneta . ' ' . $currency;
    $form['field_total_impuesto']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $total_impuesto = $form['field_total_impuesto']['widget'][0]['value']['#title'];
    $form['field_total_impuesto']['widget'][0]['value']['#title'] = $total_impuesto . ' ' . $currency;
    $form['field_totalcomprobante']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $totalcomprobante = $form['field_totalcomprobante']['widget'][0]['value']['#title'];
    $form['field_totalcomprobante']['widget'][0]['value']['#title'] = $totalcomprobante . ' ' . $currency;
    $visible = [
      'select[id="edit-field-condicion-venta"]' => ['value' => '02'],
    ];
    $form['field_plazo_credito']['widget'][0]['value']['#states']['visible'] = $visible;
    for ($i = 0; $i >= 0; $i++) {
      if (array_key_exists($i, $form['field_filas']['widget'])) {
        // Rows.
        $price = $form['field_filas']['widget'][$i]['subform']['field_preciounitario']['widget'][0]['value']['#title'];
        $form['field_filas']['widget'][$i]['subform']['field_preciounitario']['widget'][0]['value']['#title'] = $price . ' ' . $currency;
        $form['field_total_impuesto']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_monto_total_linea']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_codigo']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_codigo']['widget'][0]['value']['#default_value'] = invoice_entity_generate_row_key();
        $form['field_filas']['widget'][$i]['subform']['field_montototal']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][0]['subform']['field_subtotal']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_impuesto'];
        $form['field_filas']['widget'][$i]['subform']['field_row_discount']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $visible_condition = [
          ':input[id="field-adddis-' . $i . '"]' => ['checked' => TRUE],
        ];
        $form['field_filas']['widget'][$i]['subform']['field_add_discount']['widget']['value']['#attributes']['id'] = 'field-adddis-' . $i;
        $form['field_filas']['widget'][$i]['subform']['field_discount_percentage']['widget'][0]['value']['#states']['visible'] = $visible_condition;
        $form['field_filas']['widget'][$i]['subform']['field_discount_reason']['widget'][0]['value']['#states']['visible'] = $visible_condition;
        $visible = [
          'select[data-drupal-selector="edit-field-filas-' . $i . '-subform-field-unit-measure"]' => ['value' => 'Otros'],
        ];
        $form['field_filas']['widget'][$i]['subform']['field_another_unit_measure']['widget'][0]['value']['#states']['visible'] = $visible;
      }
      else {
        break;
      }
    }
    // The library.
    $form['#attached']['library'][] = 'invoice_entity/invoice-rows';
    $form['#attached']['library'][] = 'invoice_entity/invoice-rows-js';
    // Get all tax entities.
    $query = \Drupal::entityQuery('tax_entity');
    $tids = $query->execute();
    $tax_info = [];
    if (count($tids) > 0) {
      $entity_manager = \Drupal::entityManager();
      foreach ($tids as $index => $item) {
        $tax = $entity_manager->getStorage('tax_entity')->load($item);
        $tax_info[] = ['id' => $tax->id(), 'percentage' => $tax->get('field_tax_percentage')->value];
      }
    }
    $form['#attached']['drupalSettings']['taxsObject'] = $tax_info;
  }
}

/**
 * Custom submit action.
 */
function invoice_entity_custom_submit(&$form, FormStateInterface $form_state) {
  // Authentication.
  try {
    // Get authentication token for the API.
    $token = \Drupal::service('e_invoice_cr.authentication')->getLoginToken();
  }
  catch (Exception $e) {
    drupal_set_message(t('Error getting the authentication token.'), 'error');
    $form_state->setRebuild();
    $form_state->setSubmitHandlers([]);
  }

  if (!$token) {
    drupal_set_message(t('Error getting the authentication token.'), 'error');
    $form_state->setRebuild();
    $form_state->setSubmitHandlers([]);
  }
  else {
    /** @var \Drupal\invoice_entity\InvoiceService $invoice_service */
    $invoice_service = \Drupal::service('invoice_entity.service');

    // Get the invoice data.
    $type_of = $form_state->getValue('type_of')[0]['value'];
    $key = $form_state->getValue('field_clave_numerica')[0]['value'];
    $consecutive = $form_state->getValue('field_consecutivo')[0]['value'];
    $condition = $form_state->getValue('field_condicion_venta')[0]['value'];
    $client_id = $form_state->getValue('field_cliente')[0]['target_id'];
    $client = \Drupal::entityTypeManager()->getStorage('customer_entity')->load($client_id);
    $date_object = $form_state->getValue('field_fecha_emision')[0]['value'];
    $date = str_replace('+', '-', $date_object->format('c'));
    $rows = $form_state->getValue('field_filas');
    $pay_type = $form_state->getValue('field_medio_de_pago')[0]['value'];
    $p_credit = $form_state->getValue('field_plazo_credito')[0]['value'];
    $t_discount = $form_state->getValue('field_total_discount')[0]['value'];
    $t_tax = $form_state->getValue('field_total_impuesto')[0]['value'];
    $t_sale = $form_state->getValue('field_total_ventaneta')[0]['value'];
    $t_invoice = $form_state->getValue('field_totalcomprobante')[0]['value'];
    // Group the general information.
    $general = [
      'key' => $key,
      'type_doc' => InvoiceEntityInterface::DOCUMENTATIONINFO[$type_of]['code'],
      'consecutive' => $consecutive,
      'condition' => $condition,
      'date' => $date,
      'pay_type' => $pay_type,
      'p_credit' => $p_credit,
      't_discount' => round($t_discount, 5),
      't_tax' => round($t_tax, 5),
      't_sale' => round($t_sale, 5),
      't_invoice' => round($t_invoice, 5),
      'xml_tag' => InvoiceEntityInterface::DOCUMENTATIONINFO[$type_of]['xmltag'],
      'xmlns' => InvoiceEntityInterface::DOCUMENTATIONINFO[$type_of]['xmlns'],
    ];
    // The emitter data (currently not supporting fax fields).
    $settings = \Drupal::config('e_invoice_cr.settings');
    $emitter = [
      'name' => $settings->get('name'),
      'id' => [
        'type' => $settings->get('id_type'),
        'number' => $settings->get('id'),
      ],
      'commercialName' => $settings->get('commercial_name'),
      'address' => [
        'data1' => substr($settings->get('postal_code'), 0, 1),
        'data2' => substr($settings->get('postal_code'), 1, 2),
        'data3' => substr($settings->get('postal_code'), 3, 5),
        // This value is not support (*).
        'data4' => '01',
        'data5' => $settings->get('address'),
      ],
      'phone' => [
        'code' => substr($settings->get('phone'), 0, 3),
        'number' => substr($settings->get('phone'), 3),
      ],
      'fax' => [
        'code' => substr($settings->get('fax'), 0, 3),
        'number' => substr($settings->get('fax'), 3),
      ],
      'email' => $settings->get('email'),
    ];

    // Create XML document.
    // Get base url.
    global $base_url;
    // Generate the XML file with the invoice data.
    $xml_generator = new XMLGenerator();
    // Get the xml doc built.
    $xml = $xml_generator->generateInvoiceXml($general, $client, $emitter, $rows, $type_of);
    $xml->saveXML();
    // Create dir.
    $path = "public://xml/";
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);
    $result = $xml->save('public://xml/document.xml', LIBXML_NOEMPTYTAG);

    // Sign document.
    $signature = new Signature();
    $response = $signature->signDocument();

    if (strpos($response, "Error") !== FALSE || strpos($response, "Failed") !== FALSE) {
      $message = t('There were errors during the signature process, the signature could be wrong.');
      drupal_set_message($message, 'warning');
    }

    // Send document to API.
    $body_data = [
      'key' => $key,
      'date' => $date,
      'e_type' => $settings->get('id_type'),
      'e_number' => $settings->get('id'),
      'c_type' => $client->get('field_tipo_de_identificacion')->value,
      'c_number' => $client->get('field_intensificacion')->value,
    ];
    $communication = new Communication();
    // Get the document.
    $doc_uri = DRUPAL_ROOT . '/sites/default/files/xml_signed/xades_epes_segned.xml';
    // Get the xml content.
    $document = file_get_contents($doc_uri);
    // Sent the document.
    $response = $communication->sentDocument($document, $body_data, $token);
    // Show a error message.
    if (!is_null($response)) {
      if ($response->getStatusCode() != 202 && $response->getStatusCode() != 200) {
        // Reduce the consecutive.
        $invoice_service->decreaseValues();
        $message = t('The was a problem sending the electronic document.');
        drupal_set_message($message, 'error');
        $form_state->setRebuild();
        $form_state->setSubmitHandlers([]);
      }
      else {
        // Show a success message.
        $message = t('The electronic document was sent to its verification.');
        drupal_set_message($message, 'status');
      }
      $invoice_service->updateValues();
    }
    else {
      $form_state->setRebuild();
      $form_state->setSubmitHandlers([]);
    }
  }

  // Load the Symfony event dispatcher object through services.
  $dispatcher = \Drupal::service('event_dispatcher');
  // Creating our event class object.
  $event = new InvoiceEmailEvent($form_state->getValue('name'));
  // Dispatching the event through the â€˜dispatchâ€™  method,
  // Passing event name and event object â€˜$eventâ€™ as parameters.
  $dispatcher->dispatch(InvoiceEmailEvent::SUBMIT, $event);
}

/**
 * Generate the row key.
 */
function invoice_entity_generate_row_key() {
  // Get last consecutive.
  $result = rand(1, 999999);
  return str_pad($result, 6, '0', STR_PAD_LEFT);
}

/**
 * Generate the consecutive key and saves it.
 */
function invoice_entity_generate_consecutive($key) {
  $consecutive_number = substr($key, -29, 20);
  return $consecutive_number;
}

/**
 * Error messages.
 */
function invoice_entity_config_error() {
  $message = t('The document key could not be generated because there are not configuration data yet, to set those go to /admin/e-invoice-cr/settings.');
  drupal_set_message($message, 'error');
}

/**
 * Implements hook_entity_operation().
 */
function invoice_entity_entity_operation(EntityInterface $entity) {
  $type = $entity->getEntityType();
  if ($type->id() === "invoice_entity") {
    $status = $entity->get('moderation_state')->value;
    if ($status === "draft") {
      $key = $entity->get('field_clave_numerica')->value;
      $operations = [];
      $operations['validate'] = [
        'title' => t('Validate'),
        'url' => Url::fromRoute("invoice_entity.validate", ["key" => $key, "id" => $entity->id()]),
        'weight' => 0,
      ];
      return $operations;
    }
    if ($status === "published") {
      $operations = [];
      $operations['View'] = [
        'title' => t('View'),
        'url' => Url::fromRoute("entity.invoice_entity.canonical", ["invoice_entity" => $entity->id()]),
        'weight' => 0,
      ];
      return $operations;
    }
  }
}

/**
 * Implements hook_cron().
 */
function invoice_entity_cron() {
  // Update the invoices states.
  $query = \Drupal::entityQuery('invoice_entity');
  $nids = $query->execute();
  if (count($nids) > 0) {
    $entity_manager = \Drupal::entityManager();
    foreach ($nids as $index => $item) {
      $entity = $entity_manager->getStorage('invoice_entity')->load($item);
      if ($entity->get('moderation_state')->value === 'draft') {
        /** @var \Drupal\invoice_entity\InvoiceService $invoice_service */
        $invoice_service = \Drupal::service('invoice_entity.service');
        $invoice_service->validateInvoiceEntity($entity);
        // Show a notification massage.
        drupal_set_message(t("The invoices have been verified during the cron process."), 'status');
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function invoice_entity_preprocess_page(&$variables) {
  // Validate the route and the library.
  $variables['page']['#cache']['contexts'][] = 'route';
  $route = "entity.invoice_entity.canonical";
  if (\Drupal::routeMatch()->getRouteName() === $route) {
    $variables['#attached']['library'][] = 'invoice_entity/invoice';
  }
}

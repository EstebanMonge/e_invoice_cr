<?php

/**
 * @file
 * Contains invoice_entity.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\tax_entity\Entity\TaxEntity;

/**
 * Implements hook_form_alter().
 */
function invoice_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'invoice_entity_add_form' || $form_id === 'invoice_entity_edit_form') {
    /** @var \Drupal\invoice_entity\InvoiceService $invoice_service */
    $invoice_service = \Drupal::service('invoice_entity.service');

    // The library.
    $form['#attached']['library'][] = 'invoice_entity/invoice-rows';
    $form['#attached']['library'][] = 'invoice_entity/invoice-rows-js';
    // Get all tax entities.
    $tax_info = invoice_entity_get_tax_info();

    $form['#attached']['drupalSettings']['taxsObject'] = $tax_info;
    // Get default currency.
    $settings = \Drupal::config('e_invoice_cr.settings');
    $currency = '';
    if (isset($settings) && !is_null($settings)) {
      if (!is_null($settings->get('currency'))) {
        $currency = $settings->get('currency') === 'crc' ? 'â‚¡' : '$';
      }
      else {
        invoice_entity_config_error();
        // Disable the submit button.
        $form['actions']['submit']['#disabled'] = TRUE;
      }
    }
    else {
      invoice_entity_config_error();
      // Disable the submit button.
      $form['actions']['submit']['#disabled'] = TRUE;
    }

    $form['field_clave_numerica']['#disabled'] = 'disabled';
    $form['field_consecutivo']['#disabled'] = 'disabled';
    $form['field_total_ventaneta']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    if ($form_id === 'invoice_entity_add_form') {
      // Generate the invoice keys.
      $type_of = $form_state->getUserInput()['type_of'];
      $key = $type_of ? $invoice_service->getUniqueInvoiceKey($type_of) : $invoice_service->getUniqueInvoiceKey();
      if ($key == NULL) {
        invoice_entity_config_error();
      }
      else {
        $invoice_service->updateValues();
      }

      $form['field_clave_numerica']['widget'][0]['value']['#default_value'] = $key;
      $form['field_consecutivo']['widget'][0]['value']['#default_value'] = $invoice_service->generateConsecutive($type_of);
    }
    $form['field_total_discount']['widget'][0]['value']['#title'] .= ' ' . $currency;
    $form['field_total_discount']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $total_ventaneta = $form['field_total_ventaneta']['widget'][0]['value']['#title'];
    $form['field_total_ventaneta']['widget'][0]['value']['#title'] = $total_ventaneta . ' ' . $currency;
    $form['field_total_impuesto']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $total_impuesto = $form['field_total_impuesto']['widget'][0]['value']['#title'];
    $form['field_total_impuesto']['widget'][0]['value']['#title'] = $total_impuesto . ' ' . $currency;
    $form['field_totalcomprobante']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
    $totalcomprobante = $form['field_totalcomprobante']['widget'][0]['value']['#title'];
    $form['field_totalcomprobante']['widget'][0]['value']['#title'] = $totalcomprobante . ' ' . $currency;
    $visible = [
      'select[id="edit-field-condicion-venta"]' => ['value' => '02'],
    ];
    $form['field_plazo_credito']['widget'][0]['value']['#states']['visible'] = $visible;
    for ($i = 0; $i >= 0; $i++) {
      if (array_key_exists($i, $form['field_filas']['widget'])) {
        // Rows.
        $price = $form['field_filas']['widget'][$i]['subform']['field_preciounitario']['widget'][0]['value']['#title'];
        $form['field_filas']['widget'][$i]['subform']['field_preciounitario']['widget'][0]['value']['#title'] = $price . ' ' . $currency;
        $form['field_total_impuesto']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_monto_total_linea']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_codigo']['widget'][0]['value']['#default_value'] = invoice_entity_generate_row_key();
        $form['field_filas']['widget'][$i]['subform']['field_montototal']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][0]['subform']['field_subtotal']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $form['field_filas']['widget'][$i]['subform']['field_impuesto'];
        $form['field_filas']['widget'][$i]['subform']['field_row_discount']['widget'][0]['value']['#attributes'] = ['readonly' => 'readonly'];
        $visible_condition = [
          ':input[id="field-adddis-' . $i . '"]' => ['checked' => TRUE],
        ];
        $form['field_filas']['widget'][$i]['subform']['field_add_discount']['widget']['value']['#attributes']['id'] = 'field-adddis-' . $i;
        $form['field_filas']['widget'][$i]['subform']['field_discount_percentage']['widget'][0]['value']['#states']['visible'] = $visible_condition;
        $form['field_filas']['widget'][$i]['subform']['field_discount_reason']['widget'][0]['value']['#states']['visible'] = $visible_condition;
        $visible = [
          'select[data-drupal-selector="edit-field-filas-' . $i . '-subform-field-unit-measure"]' => ['value' => 'Otros'],
        ];
        $form['field_filas']['widget'][$i]['subform']['field_another_unit_measure']['widget'][0]['value']['#states']['visible'] = $visible;
      }
      else {
        break;
      }
    }
  }
}

/**
 * Generate the row key.
 */
function invoice_entity_generate_row_key() {
  // Get last consecutive.
  $result = rand(1, 999999);
  return str_pad($result, 6, '0', STR_PAD_LEFT);
}

/**
 * Error messages.
 */
function invoice_entity_config_error() {
  $message = t('The document key could not be generated because there are not configuration data yet, to set those go to /admin/e-invoice-cr/settings.');
  drupal_set_message($message, 'error');
}

/**
 * Implements hook_entity_operation().
 */
function invoice_entity_entity_operation(EntityInterface $entity) {
  $type = $entity->getEntityType();
  if ($type->id() === "invoice_entity") {
    $status = $entity->get('moderation_state')->value;
    if ($status === "draft") {
      $key = $entity->get('field_clave_numerica')->value;
      $operations = [];
      $operations['validate'] = [
        'title' => t('Validate'),
        'url' => Url::fromRoute("invoice_entity.validate", ["key" => $key, "id" => $entity->id()]),
        'weight' => 0,
      ];
      return $operations;
    }
    if ($status === "published") {
      $operations = [];
      $operations['View'] = [
        'title' => t('View'),
        'url' => Url::fromRoute("entity.invoice_entity.canonical", ["invoice_entity" => $entity->id()]),
        'weight' => 0,
      ];
      return $operations;
    }
  }
}

/**
 * Implements hook_cron().
 */
function invoice_entity_cron() {
  // Update the invoices states.
  $query = \Drupal::entityQuery('invoice_entity');
  $nids = $query->execute();
  if (count($nids) > 0) {
    $entity_manager = \Drupal::entityManager();
    foreach ($nids as $index => $item) {
      $entity = $entity_manager->getStorage('invoice_entity')->load($item);
      if ($entity->get('moderation_state')->value === 'draft') {
        /** @var \Drupal\invoice_entity\InvoiceService $invoice_service */
        $invoice_service = \Drupal::service('invoice_entity.service');
        $invoice_service->validateInvoiceEntity($entity);
        // Show a notification massage.
        drupal_set_message(t("The invoices have been verified during the cron process."), 'status');
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function invoice_entity_preprocess_page(&$variables) {
  // Validate the route and the library.
  $variables['page']['#cache']['contexts'][] = 'route';
  $route = "entity.invoice_entity.canonical";
  if (\Drupal::routeMatch()->getRouteName() === $route) {
    $variables['#attached']['library'][] = 'invoice_entity/invoice';
  }
}

/**
 * Function that return an array with the basic information about taxes.
 *
 * @return array
 *   Array with some information about the taxes.
 */
function invoice_entity_get_tax_info() {
  $entities = TaxEntity::loadMultiple();
  $tax_info = [];
  /** @var \Drupal\tax_entity\Entity\TaxEntity $tax */
  foreach ($entities as $tax) {
    $tax_info[$tax->id()] = [
      'tax_percentage' => $tax->get('field_tax_percentage')->value,
      'exoneration' => $tax->get('exoneration')->value,
      'ex_percentage' => $tax->get('ex_percentage')->value,
    ];
  }
  return $tax_info;
}
